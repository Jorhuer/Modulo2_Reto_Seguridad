name: Security CI

# Ejecuta en push y PR a main (ajusta ramas según tus necesidades)
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BACKEND_IMAGE: smartcity-backend:latest
  FRONTEND_IMAGE: smartcity-frontend:latest
  BANDIT_FAIL_ON: "HIGH"      # Opciones: LOW, MEDIUM, HIGH (fallará si hay issues >= este nivel)
  TRIVY_SEVERITY: "CRITICAL,HIGH"  # severidades para que Trivy falle

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ---------------------------
      # 1) Bandit: Static scan for Python
      # ---------------------------
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit (Python static security scan)
        id: bandit_run
        run: |
          # Run Bandit and produce JSON output (don't fail pipeline here directly)
          bandit -r backend/app -f json -o bandit_report.json || true
          echo "Bandit JSON report saved to bandit_report.json"
          # Show brief stats
          python - <<'PY'
import json,sys
try:
    j=json.load(open('bandit_report.json'))
    issues=j.get('results',[])
    print(f"Bandit found {len(issues)} issues (all severities).")
    # Print counts per severity
    counts={}
    for it in issues:
        sev=it.get('issue_severity',"UNKNOWN")
        counts[sev]=counts.get(sev,0)+1
    print("Counts by severity:", counts)
except FileNotFoundError:
    print("No bandit_report.json found, maybe no Python files scanned.")
PY

      - name: Fail on Bandit severity threshold
        if: always()
        run: |
          python - "$BANDIT_FAIL_ON" <<'PY'
import json,sys
threshold=sys.argv[1].upper()
order = {"LOW":1,"MEDIUM":2,"HIGH":3}
try:
    data = json.load(open("bandit_report.json"))
    issues = data.get("results",[])
except FileNotFoundError:
    issues=[]
# find any issue >= threshold
found=[]
for i in issues:
    sev = i.get("issue_severity","LOW").upper()
    if order.get(sev,0) >= order.get(threshold,3):
        found.append((sev,i.get("test_name"), i.get("filename"), i.get("issue_text")))
if found:
    print(f"Bandit: failing because found {len(found)} issues >= {threshold}")
    for s,name,fn,msg in found[:20]:
        print(f"- {s} {name} @ {fn}: {msg}")
    sys.exit(1)
else:
    print("Bandit: no issues at or above threshold. OK.")
PY

      # ---------------------------
      # 2) Build Docker images to scan
      # ---------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          docker build -t $BACKEND_IMAGE ./backend

      - name: Build frontend Docker image
        if: always()
        run: |
          if [ -d "./frontend" ]; then
            docker build -t $FRONTEND_IMAGE ./frontend || true
          else
            echo "No frontend folder, skipping frontend image build"
          fi

      # ---------------------------
      # 3) Trivy: Scan built images for vulnerabilities
      # ---------------------------
      - name: Scan backend image with Trivy
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}
          format: 'table'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          exit-code: '1'   # if vulnerabilities found at given severities -> fail

      - name: Scan frontend image with Trivy (if built)
        if: always()
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}
          format: 'table'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          exit-code: '1'
        continue-on-error: false

      # ---------------------------
      # 4) Optional: pip-audit for Python dependency scanning (depends on backend/requirements.txt)
      # ---------------------------
      - name: Install pip-audit
        run: |
          pip install pip-audit

      - name: Run pip-audit on backend requirements
        run: |
          if [ -f backend/requirements.txt ]; then
            pip-audit -r backend/requirements.txt --progress=off || true
          else
            echo "No backend/requirements.txt found, skipping pip-audit."
          fi

      # ---------------------------
      # 5) CodeQL: deeper static analysis
      # ---------------------------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild (for CodeQL)
        uses: github/codeql-action/autobuild@v2

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2
