name: Security CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  BACKEND_IMAGE: smartcity-backend:latest
  FRONTEND_IMAGE: smartcity-frontend:latest
  BANDIT_FAIL_ON: "HIGH"
  TRIVY_SEVERITY: "CRITICAL,HIGH"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      # ---------------------------
      # Bandit scan (Python code)
      # ---------------------------
      - name: Run Bandit
        run: |
          bandit -r backend/app -f json -o bandit_report.json || true
          python -c "import json; d=json.load(open('bandit_report.json')); issues=d.get('results',[]); print(f'Bandit found {len(issues)} issues.'); counts={}; [counts.setdefault(i.get('issue_severity','UNKNOWN'),0) or counts.update({i.get('issue_severity','UNKNOWN'):counts.get(i.get('issue_severity','UNKNOWN'),0)+1}) for i in issues]; print('Counts by severity:',counts)"

      - name: Fail if Bandit issues >= threshold
        run: |
          python -c "import json,sys; threshold='${BANDIT_FAIL_ON}'.upper(); order={'LOW':1,'MEDIUM':2,'HIGH':3}; issues=json.load(open('bandit_report.json')).get('results',[]); found=[i for i in issues if order.get(i.get('issue_severity','LOW').upper(),0)>=order.get(threshold,3)]; \
          sys.exit(1) if found else print(f'Bandit: no issues >= {threshold}')"

      # ---------------------------
      # Docker image build
      # ---------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: docker build -t $BACKEND_IMAGE ./backend

      - name: Build frontend Docker image
        run: |
          if [ -d "./frontend" ]; then
            docker build -t $FRONTEND_IMAGE ./frontend
          else
            echo "No frontend folder, skipping"
          fi

      # ---------------------------
      # Trivy: scan Docker images
      # ---------------------------
      - name: Scan backend with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}
          format: 'table'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          exit-code: '0' # It should 1 to report fail case

      - name: Scan frontend with Trivy
        if: always()
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}
          format: 'table'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          exit-code: '0' # It should 1 to report fail case

      # ---------------------------
      # pip-audit: check dependencies
      # ---------------------------
      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run pip-audit
        run: |
          if [ -f backend/requirements.txt ]; then
            pip-audit -r backend/requirements.txt --progress=off || true
          else
            echo "No requirements.txt found"
          fi

      # ---------------------------
      # CodeQL analysis
      # ---------------------------
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2
